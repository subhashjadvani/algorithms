#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <utility>      // std::pair, std::make_pair
#include <string>       // std::string
#include <iostream>     // std::cout
#include <queue>

using namespace std;

/*
 Linux kernel timer APIs - just for reference

#include <linux/timer.h>
struct timer_list {
 // ... //
 unsigned long expires;
 void (*function)(unsigned long);
 unsigned long data;
};
void init_timer(struct timer_list *timer);
struct timer_list TIMER_INITIALIZER(_function, _expires, _data);
void add_timer(struct timer_list * timer);
int del_timer(struct timer_list * timer);
int mod_timer(struct timer_list *timer, unsigned long expires);
int del_timer_sync(struct timer_list *timer);
*/

typedef struct Task {
	void (*func) (void *);
	unsigned long data;
} Task_t;

uint64_t curr_time_ms(void);

class Timer {
	pthread_t timer_thread;
public:
	priority_queue<pair<uint64_t, Task_t>, vector<pair<uint64_t, Task_t> >, greater<pair<uint64_t, Task_t> > > pq;
	pthread_mutex_t m;
	pthread_cond_t cv;
	Timer();
	void add_timer(uint32_t expires_ms, Task t);
};

void* timer_thread_fn(void *data) {
	Timer *t = (Timer*) data;

	while (1) {
		pthread_mutex_lock(&t->m);
		while (t->pq.size() == 0 || curr_time_ms() < t->pq.top().first)
			pthread_cond_wait(&t->cv, &t->m);

		pair<uint64_t, Task_t> p = t->pq.top();
		uint64_t expire = p.first;
		Task task = p.second;

		task.func((void*)task.data);
			 
		pthread_mutex_unlock(&t->m);
		
	}
};

uint64_t curr_time_ms(void);

Timer::Timer() {
	pthread_mutex_init(&m, NULL);
	pthread_cond_init(&cv, NULL);
	pthread_init(&timer_thread, NULL, timer_thread_fn, (void*) this); 
}

void Timer::add_timer(uint32_t expires_ms, Task t) {
	uint64_t absolute_exp = curr_time_ms() + expires_ms;

	pthread_mutex_lock(&m);
	pq.push(make_pair<absolute_exp, t>);
	pthread_cond_signal(&cv);
	pthread_mutex_unlock(&m);
}


int main(int argc, char* argv[])
{
	return 0;
}

uint64_t curr_time_ms(void)
{
    uint64_t ms; // Milliseconds
    time_t   s;  // Seconds
    struct timespec spec;

    clock_gettime(CLOCK_REALTIME, &spec);

    s  = spec.tv_sec;
    ms = round(spec.tv_nsec / 1.0e6); // Convert nanoseconds to milliseconds
    if (ms > 999) {
        s++;
        ms = 0;
    }

    printf("Current time: %"PRIdMAX".%03ld seconds since the Epoch\n",
           (intmax_t)s, ms);
    return ms;
}
